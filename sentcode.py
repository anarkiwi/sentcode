#!/usr/bin/env python
#
# Secret code generator for The Sentinel (aka The Sentry)
#
# By Simon Owen https://github.com/simonowen/sentcode

import sys
import struct
import argparse

num_landscapes = 0xe000
ull = 0

def seed(landscape_bcd):
    global ull
    ull = (1 << 16) | landscape_bcd

def rng():
    global ull
    for _ in range(8):
    	ull <<= 1
    	ull |= ((ull >> 20) ^ (ull >> 33)) & 1

    return (ull >> 32) & 0xff

def rng_bcd_digits():
    x = rng()

    # Left digit
    a = (x >> 4) & 0xf
    if a > 9:
        a -= 6

    # Right digit
    b = (x >> 0) & 0xf
    if b > 9:
        b -= 6

    return (a << 4) | b

def bbc_c64_digits():
    return rng_bcd_digits()

def cpc_digits():
    b = (rng_bcd_digits() >> 4) & 0x0f
    a = (rng_bcd_digits() << 4) & 0xf0
    return a | b

def spectrum_digits():
    b = rng_bcd_digits() & 0x0f
    a = rng_bcd_digits() & 0xf0
    return a | b

def pc_st_digits():
    for _ in range(3):
        rng()

    b = rng_bcd_digits() & 0x0f
    a = rng_bcd_digits() & 0xf0
    return a | b

def amiga_digits():
    for _ in range(3):
        rng()

    b = (rng_bcd_digits() >> 4) & 0x0f
    a = (rng_bcd_digits() << 4) & 0xf0
    return a | b

def generate_code(fn_pair, state):
    global ull

    # Set cached seeded state after landscape generation
    ull = state

    # Advance the RNG in digit pairs, for the code check obfuscation.
    for _ in range(0xa5 - 0x80 + 1):
        fn_pair()

    # The next 4 values are the landscape code.
    a, b, c, d = fn_pair(), fn_pair(), fn_pair(), fn_pair()
    return "{:02X}{:02X}{:02X}{:02X}".format(a, b, c, d)

def generate_codes(landscape_bcd):
    global ull, iterations

    # Seed RNG using landscape number.
    seed(landscape_bcd)

    # Advance the RNG by the amount the actual landscape generation would have.
    for _ in range(iterations[landscape_bcd]):
        rng()

    # Save RNG state as the starting point to generate codes.
    state = ull

    return [
		generate_code(bbc_c64_digits, state),
        generate_code(cpc_digits, state),
        generate_code(spectrum_digits, state),
        generate_code(pc_st_digits, state),
        generate_code(amiga_digits, state)]

def print_one(landscape_bcd):
    codes = generate_codes(landscape_bcd)

    entry_fmt = "{:>25s} = {}"
    print("Landscape {:04X}:\n".format(landscape_bcd))
    print(entry_fmt.format("BBC Micro / Commodore 64", codes[0]))
    print(entry_fmt.format("Amstrad CPC", codes[1]))
    print(entry_fmt.format("Sinclair Spectrum", codes[2]))
    print(entry_fmt.format("IBM PC / Atari ST", codes[3]))
    print(entry_fmt.format("Commodore Amiga", codes[4]))

def print_all(extended):
    sep = "+------+----------+----------+----------+----------+----------+"

    print("Secret codes for all landscapes in The Sentinel (aka The Sentry)\n")
    print("Generated by: https://github.com/simonowen/sentcode\n")
    print(sep)
    print(("| Land |" + " {:^8s} |" * 5).format(
        "BBC/C64", "CPC", "Spectrum", "PC/ST", "Amiga"))
    print(sep)

    for landscape_bcd in range(num_landscapes):
        if not extended and not "{:X}".format(landscape_bcd).isdigit():
            continue

        codes = generate_codes(landscape_bcd)
        print(("| {:04X} |" + " {} |" * 5).format(landscape_bcd, *codes))

    print(sep)

def main(args):
    global ull, iterations

    # Read the RNG iterations count for each landscape.
    with open('iterations.bin', 'rb') as f:
        iterations = struct.unpack("<{}h".format(num_landscapes), f.read())

    if args.all:
        print_all(args.extended)
    elif args.landscape >= 0 and args.landscape < num_landscapes:
        print_one(args.landscape)
    elif args.landscape == None:
        parser.print_help()
    else:
        print("Landscape number must be in range {:04X}-{:04X}".format(0, num_landscapes - 1))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Landscape code generator for The Sentinel.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('landscape', help='landscape number', type=lambda x: int(x,16), nargs='?')
    parser.add_argument('-a', help='all landscape codes (SLOW!)', dest='all', action='store_true')
    parser.add_argument('-x', help='include extended landscapes', dest='extended', action='store_true')
    main(parser.parse_args())
